@page "/register"
@using CodeRank.API.Identity
@using CodeRank.App.Identity
@using CodeRank.App.Services
@using System.ComponentModel.DataAnnotations
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject TokenService TokenService

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-5">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Register</h3>
                    @if (errors.Any())
                    {
                        <div class="alert alert-danger" role="alert">
                            <ul class="mb-0">
                                @foreach (var error in errors)
                                {
                                    <li>@error</li>
                                }
                            </ul>
                        </div>
                    }
                    <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group mb-3">
                            <label for="username">Username:</label>
                            <InputText id="username" @bind-Value="registerModel.Username" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Username)" />
                        </div>
                        <div class="form-group mb-3">
                            <label for="email">Email:</label>
                            <InputText id="email" @bind-Value="registerModel.Email" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Email)" />
                        </div>
                        <div class="form-group mb-3">
                            <label for="password">Password:</label>
                            <InputText id="password" @bind-Value="registerModel.Password" class="form-control" type="password" />
                            <ValidationMessage For="@(() => registerModel.Password)" />
                        </div>
                        <div class="form-group mb-3">
                            <label for="confirmPassword">Confirm Password:</label>
                            <InputText id="confirmPassword" @bind-Value="registerModel.ConfirmPassword" class="form-control" type="password" />
                            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                        </div>
                        <div class="form-group mb-3">
                            <label for="accountType">Account Type:</label>
                            <InputSelect id="accountType" @bind-Value="registerModel.AccountType" class="form-control">
                                <option value="@AccountType.Instructor">Instructor</option>
                                <option value="@AccountType.Student">Student</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => registerModel.AccountType)" />
                        </div>
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">Register</button>
                            <button type="button" class="btn btn-secondary" @onclick="NavigateToLogin">Back to Login</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModelExtended registerModel = new RegisterModelExtended();
    private List<string> errors = new List<string>();

    private async Task HandleRegistration()
    {
        errors.Clear();
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            errors.Add("Password and Confirm Password do not match.");
            return;
        }

        var result = await AuthService.Register(registerModel);
        if (result.IsSuccessfulRegistration)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            errors = result.Errors.ToList();
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }
    public class RegisterModelExtended : RegisterModel
    {
        [Required(ErrorMessage = "Confirm Password is required")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }
    }
}

