@page "/login" 
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject TokenService TokenService

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-5">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Login</h3>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group mb-3">
                            <label for="username">Username:</label>
                            <InputText id="username" @bind-Value="loginModel.Username" class="form-control" />
                            <ValidationMessage For="@(() => loginModel.Username)" />
                        </div>
                        <div class="form-group mb-3">
                            <label for="password">Password:</label>
                            <InputText id="password" @bind-Value="loginModel.Password" class="form-control" type="password" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">Login</button>
                            <button type="button" class="btn btn-secondary" @onclick="NavigateToRegister">Register</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        errorMessage = string.Empty; // Clear any previous errors
        try
        {
            var result = await AuthService.Login(loginModel);
            if (result.IsAuthSuccessful)
            {
                await TokenService.SetTokenAsync(result.Token);
                await TokenService.SetRefreshTokenAsync(result.RefreshToken);
                ((JwtAuthenticationStateProvider)AuthStateProvider).NotifyUserAuthentication(result.Token);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "An error occurred during login.";
            }
        }
        catch (HttpRequestException e)
        {
            errorMessage = "Unable to connect to the server. Please try again later.";
        }
        catch (Exception e)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
        }
    }

    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/register");
    }
}